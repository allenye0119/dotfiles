" Plugins {{{
""""""""""
" Vundle "
""""""""""

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" appereance
Plugin 'flazz/vim-colorschemes'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'edkolev/tmuxline.vim'
Plugin 'altercation/vim-colors-solarized'

" snippets and autocomplete
Plugin 'Valloric/YouCompleteMe'
Plugin 'sirver/ultisnips'
Plugin 'honza/vim-snippets'

" moving around
Plugin 'bkad/camelcasemotion'
Plugin 'easymotion/vim-easymotion'
Plugin 'christoomey/vim-tmux-navigator'

" file-related
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

" git integration
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'
Plugin 'xuyuanp/nerdtree-git-plugin'

" code overview
Plugin 'majutsushi/tagbar'

" easy commenting
Plugin 'scrooloose/nerdcommenter'

" dealing with paired-characters
Plugin 'jiangmiao/auto-pairs'
Plugin 'tpope/vim-surround'

" syntax checking
Plugin 'w0rp/ale'

" language packs
Plugin 'sheerun/vim-polyglot'
Plugin 'lervag/vimtex'
Plugin 'ap/vim-css-color'

" distraction-free writing
Plugin 'junegunn/goyo.vim'
Plugin 'junegunn/limelight.vim'

" must be at the last
Plugin 'ryanoasis/vim-devicons'

" vim tmux focus events
Plugin 'tmux-plugins/vim-tmux-focus-events'

" save vim session automatically
Plugin 'tpope/vim-obsession'

call vundle#end()
filetype plugin indent on


" Leader {{{
""""""""""
" Leader "
""""""""""

let mapleader=','
" }}}



" Plugin Settings {{{
"""""""""""""""""""
" Plugin Settings "
"""""""""""""""""""

" devicons
set encoding=utf8
let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '

" airline
set laststatus=2
let g:airline_theme='solarized'
let g:airline_solarized_bg='dark'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1

"let g:airline_left_sep=' '
"let g:airline_right_sep=' '
"let g:airline_left_alt_sep=' '
"let g:airline_right_alt_sep=' '
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_alt_sep=''

let g:airline#extensions#whitespace#checks = []

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1

let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 1

let g:airline#extensions#ale#error_symbol = 'E:'
let g:airline#extensions#ale#warning_symbol = 'W:'
let g:airline#extensions#ale#show_line_number = 0
let g:airline#extensions#ale#enabled = 1

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" tmuxline
let g:tmuxline_preset = {
    \ 'a': ' #S',
    \ 'win': ['#I', '#W#F'],
    \ 'cwin': ['#I', '#W#F'],
    \ 'x': [
        \ "C #(uptime | cut -d ' ' -f 14 | tr -d ',')%",
        \ "M #(free -h | sed '2!d' | tr -s ' ' | cut -d ' ' -f 3)",
        \ "G #(nvidia-smi -q | grep -A3 FB | grep Used | tr -s ' ' | cut -d ' ' -f 4) MiB"],
    \ 'y': ' %H:%M',
    \ 'z': ' %a, %b %d %Y',
    \ 'options': {'status-justify': 'left'}}
" let g:tmuxline_separators = {
    "\ 'left': ' ',
    "\ 'right': ' ',
    "\ 'left_alt': '|',
    "\ 'right_alt': '|',
    "\ 'space': ' '}
 let g:tmuxline_separators = {
    \ 'left': '',
    \ 'right': '',
    \ 'left_alt': '|',
    \ 'right_alt': '|',
    \ 'space': ' '}

" devicon
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" youcompleteme
set pumheight=20
set splitbelow
let g:ycm_python_binary_path = 'python'
let g:ycm_key_list_select_completion = ['<tab>']
let g:ycm_key_list_previous_completion = ['<s-tab>']
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" ultisnips
let g:UltiSnipsExpandTrigger = '<leader>e'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

" camelcasemoving
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap b
sunmap e
sunmap ge

" easymotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
map <Leader><Leader>s <Plug>(easymotion-f)
map <Leader><Leader>h <Plug>(easymotion-linebackward)
map <Leader><Leader>l <Plug>(easymotion-lineforward)
map <Leader><Leader>j <Plug>(easymotion-j)
map <Leader><Leader>k <Plug>(easymotion-k)
map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map n <Plug>(easymotion-next)
map N <Plug>(easymotion-prev)

" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>

"ctrlp
let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()':              ['<bs>',],
    \ 'ToggleType(1)':        ['<c-l>'],
    \ 'ToggleType(-1)':       ['<c-h>'],
    \ 'PrtHistory(-1)':       [],
    \ 'MarkToOpen()':         ['<c-n>'],
    \ 'PrtCurLeft()':         ['<left>'],
    \ 'PrtCurRight()':        ['<right>']
    \ }
let g:ctrlp_open_multiple_files = 'ij'
let g:ctrlp_open_new_file = 'r'

" nerdtree
autocmd bufenter *
    \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
    \ | q | endif
nnoremap <silent> <c-_> :NERDTreeToggle<CR>
inoremap <silent> <c-_> <esc>:NERDTreeToggle<CR>i
let NERDTreeAutoDeleteBuffer=1

" vim-nerd-tree-syntax-highlight
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

" nerdtree-git-plugin
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "+",
    \ "Staged"    : "!",
    \ "Untracked" : "?",
    \ "Renamed"   : "→",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "x",
    \ "Dirty"     : "+",
    \ "Clean"     : "",
    \ 'Ignored'   : "~",
    \ "Unknown"   : ""}
    
" vim-gutter
highlight GitGutterAdd ctermbg=8 ctermfg=2
highlight GitGutterChange ctermbg=8 ctermfg=3
highlight GitGutterDelete ctermbg=8 ctermfg=1
highlight GitGutterChangeDelete ctermbg=8 ctermfg=2
let g:gitgutter_sign_removed = '-'
let g:gitgutter_sign_removed_first_line = '-'

" nerdcommenter
noremap <silent> <leader>c :call NERDComment(0,"toggle")<CR>
inoremap <silent> <leader>c <esc>:call NERDComment(0,"toggle")<CR>i

" vim-auto-pairs
" remember to manually disable nmap in the source file, to prevent collision
" with vim-tmux-navigator
let g:AutoPairsShortcutJump = '<c-l>'

" tagbar
nnoremap <c-\> :TagbarToggle<CR>
inoremap <c-\> <esc>:TagbarToggle<CR>i
let g:tagbar_iconchars = ['▸', '▾']
let g:tagbar_map_togglefold = 't'
let g:tagbar_map_nexttag = '<tab>'
let g:tagbar_map_prevtag = '<s-tab>'

" ale
let g:ale_linters = {
\   'python': ['flake8']
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_error = '◈ '
let g:ale_sign_warning = '◈ '
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
nmap <silent> <C-n> <Plug>(ale_next_wrap)
nmap <silent> <C-m> <Plug>(ale_previous_wrap)

" vim-polyglot
let g:polyglot_disabled = ['latex']

" dragvisuals
"source $HOME/.dotfiles/vim/dragvisuals.vim
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()
let g:DVB_TrimWS = 1
" }}}



" General Settings {{{
""""""""""""""""""""
" General Settings "
""""""""""""""""""""

" some stuff
syntax on
set wildmenu
set wildignore+=*.swp,*.swo,*swn,*.zip,*.png,*.jpg,*jpeg,*pdf,.git,__pycache__
set foldenable
set mouse=a
set timeoutlen=500
set backspace=indent,eol,start
set scrolloff=8
set iskeyword-=_,A-Z
set splitright
set splitbelow

" color
set t_Co=256
set background=dark
colorscheme solarized

" line indicators
set colorcolumn=81
set cursorline
highlight Normal ctermbg=none
highlight CursorLine cterm=underline ctermbg=none

" tab
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

" indentation
set autoindent
set smartindent

" search
set showmatch
set incsearch
set hlsearch
highlight Search ctermfg=none cterm=underline,bold
set ignorecase
set smartcase

" fold
set foldenable
set foldmethod=marker
set foldlevelstart=99
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" line number
set number
set nuw=6
set relativenumber
highlight LineNr ctermbg=none

" buffer
set hidden

" jump to the last position when opening a file
autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif

" quit when there's no buffer left
autocmd BufDelete * if len(filter(range(1, bufnr('$')), '! empty(bufname(v:val)) && buflisted(v:val)')) == 1 | quit | endif
" }}}



" Mappings {{{
""""""""""""
" Mappings "
""""""""""""

" source/edit vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>
nnoremap <silent> <leader>ev :e ~/.vimrc<CR>

" disable left/right/up/down
nnoremap <Left> <nop>
nnoremap <Right> <nop>
nnoremap <Up> <nop>
nnoremap <Down> <nop>
inoremap <Left> <nop>
inoremap <Right> <nop>
inoremap <Up> <nop>
inoremap <Down> <nop>

" open/save/close buffer
nnoremap <leader>e :e<space>
nnoremap <silent> <leader>w :w<CR>
nnoremap <silent> <leader>x :bd<CR>
nnoremap <silent> <leader>q :wa \| qa<CR>

" split window
nnoremap <leader>v :hsplit<space>
nnoremap <leader>h :vsplit<space>

" navigate through buffer
nnoremap <silent> <Left> :bp<CR>
nnoremap <silent> <Right> :bn<CR>
inoremap <silent> <Left> <esc>:bp<CR>
inoremap <silent> <Right> <esc>:bn<CR>

" escape
inoremap kj <esc>
inoremap jk <esc>

" :->;
nnoremap ; :

" move to start/end of line
nnoremap H ^
nnoremap L $

" fast moving
nnoremap <c-f> <c-f>zz
nnoremap <c-b> <c-b>zz

" move line up/down one line
nnoremap - ddkP
nnoremap _ ddp

" select previously selected text
nnoremap <leader>ss gv

" select pasted text
nnoremap <leader>sp `[v`]

" select innerword
nnoremap <space> viw
nnoremap <CR> viws

" copy and paste current line
nnoremap pp Vyp

" delete current line in insert mode
inoremap <c-d> <esc>ddi

" undo in insert mode
inoremap <c-u> <esc>ui

" toggle upper/lower case of a word
nnoremap <c-c> viw~
inoremap <c-c> <esc>lviw~i

" remove highlight
nnoremap <silent> <leader><CR> :nohl<CR>

" toggle paste mode
nnoremap <silent> <leader>pp :setlocal paste!<CR>
" }}}
